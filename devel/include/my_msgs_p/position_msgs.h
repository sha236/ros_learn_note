// Generated by gencpp from file my_msgs_p/position_msgs.msg
// DO NOT EDIT!


#ifndef MY_MSGS_P_MESSAGE_POSITION_MSGS_H
#define MY_MSGS_P_MESSAGE_POSITION_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs_p
{
template <class ContainerAllocator>
struct position_msgs_
{
  typedef position_msgs_<ContainerAllocator> Type;

  position_msgs_()
    : x_axis(0.0)
    , y_axis(0.0)  {
    }
  position_msgs_(const ContainerAllocator& _alloc)
    : x_axis(0.0)
    , y_axis(0.0)  {
  (void)_alloc;
    }



   typedef double _x_axis_type;
  _x_axis_type x_axis;

   typedef double _y_axis_type;
  _y_axis_type y_axis;





  typedef boost::shared_ptr< ::my_msgs_p::position_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs_p::position_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct position_msgs_

typedef ::my_msgs_p::position_msgs_<std::allocator<void> > position_msgs;

typedef boost::shared_ptr< ::my_msgs_p::position_msgs > position_msgsPtr;
typedef boost::shared_ptr< ::my_msgs_p::position_msgs const> position_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs_p::position_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs_p::position_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs_p::position_msgs_<ContainerAllocator1> & lhs, const ::my_msgs_p::position_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.x_axis == rhs.x_axis &&
    lhs.y_axis == rhs.y_axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs_p::position_msgs_<ContainerAllocator1> & lhs, const ::my_msgs_p::position_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs_p

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_msgs_p::position_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs_p::position_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs_p::position_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs_p::position_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs_p::position_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs_p::position_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs_p::position_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88341bb7295f2b6a620efccae1466ba4";
  }

  static const char* value(const ::my_msgs_p::position_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88341bb7295f2b6aULL;
  static const uint64_t static_value2 = 0x620efccae1466ba4ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs_p::position_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs_p/position_msgs";
  }

  static const char* value(const ::my_msgs_p::position_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs_p::position_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_axis\n"
"float64 y_axis\n"
;
  }

  static const char* value(const ::my_msgs_p::position_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs_p::position_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_axis);
      stream.next(m.y_axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs_p::position_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs_p::position_msgs_<ContainerAllocator>& v)
  {
    s << indent << "x_axis: ";
    Printer<double>::stream(s, indent + "  ", v.x_axis);
    s << indent << "y_axis: ";
    Printer<double>::stream(s, indent + "  ", v.y_axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_P_MESSAGE_POSITION_MSGS_H
